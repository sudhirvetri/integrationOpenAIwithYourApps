// Integrating OPENAI into your app- connect dotnet core console with Azure open AI deployed model with key , end point and deployment name.


// Implicit using statements are included
   using System.Text;
   using System.Text.Json;
   using Microsoft.Extensions.Configuration;
   using Microsoft.Extensions.Configuration.Json;
   using Azure;
   
   // Add Azure OpenAI package
   using Azure.AI.OpenAI;
   
   // Build a config object and retrieve user settings.
   IConfiguration config = new ConfigurationBuilder()
       .AddJsonFile("appsettings.json")
       .Build();
   string? oaiEndpoint = config["AzureOAIEndpoint"];
   string? oaiKey = config["AzureOAIKey"];
   string? oaiDeploymentName = config["AzureOAIDeploymentName"];
   
   if(string.IsNullOrEmpty(oaiEndpoint) || string.IsNullOrEmpty(oaiKey) || string.IsNullOrEmpty(oaiDeploymentName) )
   {
       Console.WriteLine("Please check your appsettings.json file for missing or incorrect values.");
       return;
   }
   
   // Initialize the Azure OpenAI client...
   // Initialize the Azure OpenAI client
      OpenAIClient client = new OpenAIClient(new Uri(oaiEndpoint), new AzureKeyCredential(oaiKey));
   
   // System message to provide context to the model
   string systemMessage = "I am a hiking enthusiast named Forest who helps people discover hikes in their area. If no area is specified, I will default to near Rainier National Park. I will then provide three suggestions for nearby hikes that vary in length. I will also share an interesting fact about the local nature on the hikes when making a recommendation.";
   
   // Initialize messages list
   var messagesList = new List<ChatRequestMessage>()
   {
       new ChatRequestSystemMessage(systemMessage),
   };
   
   
   do {
       Console.WriteLine("Enter your prompt text (or type 'quit' to exit): ");
       string? inputText = Console.ReadLine();
       if (inputText == "quit") break;
   
       // Generate summary from Azure OpenAI
       if (inputText == null) {
           Console.WriteLine("Please enter a prompt.");
           continue;
       }
       
       Console.WriteLine("\nSending request for summary to Azure OpenAI endpoint...\n\n");
   
       // Add code to send request...
      // Add code to send request...
       // Build completion options object
       messagesList.Add(new ChatRequestUserMessage(inputText));
   
       ChatCompletionsOptions chatCompletionsOptions = new ChatCompletionsOptions()
       {
           MaxTokens = 1200,
           Temperature = 0.7f,
           DeploymentName = oaiDeploymentName
       };
   
       // Add messages to the completion options
       foreach (ChatRequestMessage chatMessage in messagesList)
       {
           chatCompletionsOptions.Messages.Add(chatMessage);
       }
   
       // Send request to Azure OpenAI model
       ChatCompletions response = client.GetChatCompletions(chatCompletionsOptions);
   
       // Return the response
       string completion = response.Choices[0].Message.Content;
   
       // Add generated text to messages list
       messagesList.Add(new ChatRequestAssistantMessage(completion));
   
       Console.WriteLine("Response: " + completion + "\n");
   
   
   } while (true);
